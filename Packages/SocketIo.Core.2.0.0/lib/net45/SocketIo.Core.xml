<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SocketIo.Core</name>
    </assembly>
    <members>
        <member name="T:SocketIo.Io">
            <summary>
            Static class used to connect sockets
            </summary>
        </member>
        <member name="M:SocketIo.Io.Restart(SocketIo.SocketIo,System.String,System.Nullable{System.UInt16},System.Nullable{System.UInt16},System.Nullable{SocketIo.SocketTypes.SocketHandlerType},System.Int32)">
            <summary>
            Restarts the socket with the parameters provided, if null, it defaults to what is already set. If the socket has a listener setup, it will restart as well.
            </summary>
            <param name="socket"></param>
            <param name="ip"></param>
            <param name="sendPort"></param>
            <param name="receivePort"></param>
            <param name="type"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:SocketIo.Io.Create(System.String,System.UInt16,System.UInt16,SocketIo.SocketTypes.SocketHandlerType,System.Int32,System.String)">
            <summary>
            Creates a socket that will send and receive messages
            </summary>
            <param name="ip"></param>
            <param name="sendPort"></param>
            <param name="receivePort"></param>
            <param name="type"></param>
            <param name="timeout"></param>
            <param name="initialEmit"></param>
            <returns></returns>
        </member>
        <member name="M:SocketIo.Io.CreateSender(System.String,System.UInt16,SocketIo.SocketTypes.SocketHandlerType,System.Int32,System.String)">
            <summary>
            Creates a socket that will send messages
            </summary>
            <param name="ip"></param>
            <param name="sendPort"></param>
            <param name="type"></param>
            <param name="timeout"></param>
            <param name="initialEmit"></param>
            <returns></returns>
        </member>
        <member name="M:SocketIo.Io.AddListener(SocketIo.SocketIo,System.UInt16)">
            <summary>
            Adds a listener to the socket
            </summary>
            <param name="socket"></param>
            <param name="receivePort"></param>
            <returns></returns>
        </member>
        <member name="M:SocketIo.Io.AddSender(SocketIo.SocketIo,System.UInt16,System.String)">
            <summary>
            Adds a sender to the socket
            </summary>
            <param name="socket"></param>
            <param name="sendPort"></param>
            <param name="initialEmit"></param>
            <returns></returns>
        </member>
        <member name="M:SocketIo.Io.CreateListener(System.String,System.UInt16,SocketIo.SocketTypes.SocketHandlerType,System.Int32)">
            <summary>
            Creates a socket that will receive messages
            </summary>
            <param name="ip"></param>
            <param name="receivePort"></param>
            <param name="type"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:SocketIo.BaseEmitter">
            <summary>
            Class all emitter types inherit from
            </summary>
        </member>
        <member name="T:SocketIo.Emitter">
            <summary>
            Parameterless Emitter
            </summary>
        </member>
        <member name="T:SocketIo.Emitter`1">
            <summary>
            Emitter with 1 Parameter
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SocketIo.SocketIo">
            <summary>
            Abstraction of a UDP/TCP client that writes like Socket.IO
            </summary>
        </member>
        <member name="M:SocketIo.SocketIo.On(System.String,System.Action)">
            <summary>
            Register an event with an action
            </summary>
            <param name="event"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:SocketIo.SocketIo.On``1(System.String,System.Action{``0})">
            <summary>
            Register an event with an action with a paramter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="event"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:SocketIo.SocketIo.Emit(System.String)">
            <summary>
            Sends a empty message to the connected Listener
            </summary>
            <param name="event"></param>
        </member>
        <member name="M:SocketIo.SocketIo.Emit``1(System.String,``0)">
            <summary>
            Sends a message to the connected Listener
            </summary>
            <typeparam name="T"></typeparam>
            <param name="event"></param>
            <param name="message"></param>
        </member>
        <member name="M:SocketIo.SocketIo.Emit(System.String,System.Net.IPEndPoint)">
            <summary>
            Sends a empty message to the specified enpoint
            </summary>
            <param name="event"></param>
            <param name="endpoint"></param>
        </member>
        <member name="M:SocketIo.SocketIo.Emit``1(System.String,``0,System.Net.IPEndPoint)">
            <summary>
            Sends a message to the specified enpoint
            </summary>
            <typeparam name="T"></typeparam>
            <param name="event"></param>
            <param name="message"></param>
            <param name="endpoint"></param>
        </member>
        <member name="M:SocketIo.SocketIo.Close">
            <summary>
            Closes the socket and all emitters.
            </summary>
        </member>
        <member name="M:SocketIo.SocketTypes.BaseNetworkProtocol.Listen(System.Net.IPEndPoint)">
            <summary> 
            Listens to incoming UDP packets on the ReceivePort and passes them to the HandleMessage in a Parallel task 
            </summary> 
        </member>
        <member name="M:SocketIo.SocketTypes.BaseNetworkProtocol.Send(SocketIo.SocketMessage,System.Net.IPEndPoint)">
            <summary> 
            Sends the message and doesn't wait for input, that should be handled in Listen 
            </summary> 
            <param name="msg"></param> 
            <param name="endpoint"></param> 
        </member>
        <member name="T:SocketIo.SocketTypes.SocketHandlerType">
            <summary>
            Socket Type
            </summary>
        </member>
        <member name="F:SocketIo.SocketTypes.SocketHandlerType.Udp">
            <summary>
            UDP is a connection-less, unreliable, datagram protocol 
            </summary>
        </member>
        <member name="F:SocketIo.SocketTypes.SocketHandlerType.Tcp">
            <summary>
            TCP is a connection-oriented, reliable and stream based protocol
            </summary>
        </member>
        <member name="T:SocketIo.SocketTypes.UDPHandler">
            <summary> 
            Handles all UDP input via async methods 
            </summary> 
        </member>
        <member name="M:SocketIo.SocketTypes.UDPHandler.GetUDP(System.Int32)">
            <summary> 
            Wrapper for creating a non-blocking UDP port 
            </summary> 
            <param name="port"></param> 
            <returns></returns> 
        </member>
        <member name="M:SocketIo.SocketTypes.UDPHandler.Listen(System.Net.IPEndPoint)">
            <summary> 
            Listens to incoming UDP packets on the ReceivePort and passes them to the HandleMessage in a Parallel task 
            </summary> 
        </member>
        <member name="M:SocketIo.SocketTypes.UDPHandler.HandleMessage(System.Net.Sockets.UdpReceiveResult)">
            <summary> 
            Handles the network message and hands it to the correct Handler 
            </summary> 
            <param name="message"></param> 
        </member>
        <member name="M:SocketIo.SocketTypes.UDPHandler.Send(SocketIo.SocketMessage,System.Net.IPEndPoint)">
            <summary> 
            Sends the message and doesn't wait for input, that should be handled in Listen 
            </summary> 
            <param name="msg"></param> 
            <param name="endpoint"></param> 
        </member>
    </members>
</doc>
